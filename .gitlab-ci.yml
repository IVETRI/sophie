stages:
  - python:flake8
  - docker:security_test
  - docker:deploy

variables:
  DOCKER_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH"


python:flake8:
  image: python:latest
  stage: python:flake8
  allow_failure: true
  before_script:
    - pip install flake8
    - pip install --force-reinstall git+https://github.com/pycqa/pyflakes
  script:
    - cd /builds/MrYacha/sophie/
    - python3 -m flake8 sophie_bot --max-line-length=120 --ignore=E203,E231,E701 | tee flake8-report.txt
  artifacts:
    paths: [flake8-report.txt]


docker:deploy:
  image: docker:latest
  stage: docker:deploy
  allow_failure: false
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" registry.gitlab.com
  script:
    - docker build --pull -t "$DOCKER_IMAGE" .
    - docker push "registry.gitlab.com/mryacha/sophie:$CI_COMMIT_BRANCH"
  only:
    - stable
    - unstable


docker:security_test:
  stage: docker:security_test
  image: docker:stable
  services:
  - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  script:
  - docker run -d --name db arminc/clair-db:latest
  - docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
  - apk add -U wget ca-certificates
  - docker build --pull -t "$DOCKER_IMAGE" .  # Build docker container for test
  - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
  - mv clair-scanner_linux_amd64 clair-scanner
  - chmod +x clair-scanner
  - touch clair-whitelist.yml
  - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
  - retries=0
  - echo "Waiting for clair daemon to start"
  - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
  - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml $DOCKER_IMAGE || true
  - cat gl-container-scanning-report.json
  artifacts:
    paths: [gl-container-scanning-report.json]
